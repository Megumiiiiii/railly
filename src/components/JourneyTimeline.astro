---
import type { AnyActivity } from "@/types";

const activityItems: AnyActivity[] = [
  {
    type: 'project',
    icon: '💻',
    title: 'Created first draft of logit',
    details: 'Spent 2h45m working on the activity log page',
    date: new Date(2024, 7, 13), // August 13, 2024
    tags: ['project', 'development'],
    projectPhase: 'First Draft',
    timeSpent: 165, // minutes
    tasksCompleted: 1,
    totalTasks: 1
  },
  {
    type: 'study',
    icon: '📚',
    title: 'Completed Chapter 6 of "The Rust Programming Language" book',
    details: 'Read sections 6.2, 6.3, and 6.4, and solved corresponding Rustlings exercises (08 enums)',
    date: new Date(2024, 7, 13), // August 13, 2024
    tags: ['rust', 'book', 'learning'],
    bookProgress: {
      currentChapter: 6,
      totalChapters: 21,
      percentage: 29
    },
    topics: ['Enums', 'Pattern Matching', 'Control Flow'],
    timeSpent: 120 // estimated time, adjust as needed
  },
  {
    type: 'learning',
    icon: '🧮',
    title: 'Math Academy Progress',
    details: 'Completed 7 lessons and 1 assessment',
    date: new Date(2024, 7, 13), // August 13, 2024
    tags: ['math', 'learning'],
    lessonsCompleted: 7,
    topicsImproved: [
      'Intersections of Lines and Quadratic Functions',
      'Average Rate of Change',
      'Domain and Range of Quadratic Functions',
      'Exponential Equations',
      'Laws of Logarithms',
      'Limits at Infinity'
    ],
    pointsEarned: 70
  },
  {
    type: 'progress',
    icon: '🦀',
    title: 'Completed Rustlings exercises on structs and enums',
    details: '34/94 exercises (36% complete)',
    date: new Date(2024, 7, 12), // August 12, 2024
    tags: ['rust', 'learning'],
    progress: {
      current: 34,
      total: 94,
      percentage: 36
    },
    topics: ['Structs', 'Enums', 'Pattern Matching']
  },
  {
    type: 'progress',
    icon: '🦀',
    title: 'Completed Rustlings exercises on structs and enums',
    details: '34/94 exercises (36% complete)',
    date: new Date(2024, 7, 12), // August 12, 2024
    tags: ['rust', 'learning'],
    progress: {
      current: 34,
      total: 94,
      percentage: 36
    },
    topics: ['Structs', 'Enums', 'Pattern Matching']
  },
  {
    type: 'achievement',
    icon: '🏅',
    title: 'Reached Gold League in Math Academy',
    details: 'Completed 8 lessons in Foundations II',
    date: new Date(2024, 7, 12), // August 12, 2024
    tags: ['math', 'achievement'],
    leagueProgress: {
      current: 'Gold',
      next: 'Platinum',
      totalEarned: 1265
    },
    lessonsCompleted: 8,
    topicsStrengthened: ['Algebra', 'Geometry', 'Trigonometry']
  },
  {
    type: 'study',
    icon: '📚',
    title: 'Continued "The Rust Programming Language" book',
    details: 'Focusing on structs and enums',
    date: new Date(2024, 7, 12), // August 12, 2024
    tags: ['rust', 'book'],
    bookProgress: {
      currentChapter: 5,
      totalChapters: 21,
      percentage: 24
    },
    timeSpent: 120 // minutes
  },
  {
    type: 'project',
    icon: '💻',
    title: 'Started multi-client chat server project in Rust',
    details: 'Planning server + client implementation with TCP and concurrency',
    date: new Date(2024, 7, 12), // August 12, 2024
    tags: ['rust', 'project', 'networking'],
    projectPhase: 'Planning',
    tasksCompleted: 2,
    totalTasks: 10
  },
  {
    type: 'learning',
    icon: '🧮',
    title: 'Math Academy streak',
    details: '16-day streak in Math Foundations',
    date: new Date(2024, 7, 11), // August 11, 2024
    tags: ['math', 'streak'],
    streakDays: 16,
    pointsEarned: 320,
    topicsImproved: ['Calculus', 'Linear Algebra']
  },
  {
    type: 'planning',
    icon: '🗓️',
    title: 'Planned UI-oriented language project',
    details: 'Will be implemented in Rust',
    date: new Date(2024, 7, 10), // August 10, 2024
    tags: ['rust', 'project', 'planning'],
    projectPhase: 'Conceptualization',
    ideasGenerated: 5,
    nextSteps: ['Research existing UI languages', 'Define core language features']
  },
  {
    type: 'milestone',
    icon: '🏆',
    title: 'Reached 25% of Foundations II in Math Academy',
    details: 'Currently in Silver League 🥈',
    date: new Date(2024, 7, 9), // August 9, 2024
    tags: ['math', 'milestone'],
    progress: {
      current: 25,
      total: 100,
      percentage: 25
    },
    leagueProgress: {
      current: 'Silver',
      next: 'Gold',
      totalEarned: 712
    }
  },
  {
    type: 'start',
    icon: '🚀',
    title: 'Began low-level programming and math journey',
    details: 'Inspired by @ludwigABAP, @dnbt777, and @_MathAcademy_',
    date: new Date(2024, 7, 1), // August 1, 2024
    tags: ['rust', 'math', 'journey'],
    goalsSet: ['Master Rust', 'Improve math skills', 'Build complex systems'],
    initialResources: ['Rust Book', 'Math Academy', 'Online tutorials']
  }
];

function formatDate(date: Date): string {
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

  if (diffDays === 0) return 'Today';
  if (diffDays === 1) return 'Yesterday';
  if (diffDays < 7) return `${diffDays} days ago`;
  if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
  if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;
  return `${Math.floor(diffDays / 365)} years ago`;
}

function groupActivities(items: AnyActivity[]): AnyActivity[][] {
  const grouped: { [key: string]: AnyActivity[] } = {};
  items.forEach(item => {
    const key = `${item.type}-${item.title}`;
    if (!grouped[key]) {
      grouped[key] = [];
    }
    grouped[key].push(item);
  });
  return Object.values(grouped);
}

function getTagClasses(tag: string): string {
  switch (tag.toLowerCase()) {
    case 'rust':
      return 'bg-orange-100 text-orange-800 dark:bg-orange-600/30 dark:text-foreground';
    case 'math':
      return 'bg-blue-100 text-blue-800 dark:bg-blue-600/30 dark:text-foreground';
    case 'project':
      return 'bg-purple-100 text-purple-800 dark:bg-purple-600/30 dark:text-foreground';
    default:
      return 'bg-primary/10 text-primary';
  }
}

function getProgressBarColor(percentage: number): string {
  if (percentage < 33) return 'bg-red-500';
  if (percentage < 66) return 'bg-yellow-500';
  return 'bg-green-500';
}

const groupedActivities = groupActivities(activityItems);
---

<section class="activity-log bg-background text-foreground rounded-lg">
  <div class="flex justify-between items-center">
    <h2 class="text-lg m-0">Activity Log</h2>
    <div class="flex items-center space-x-4">
      <label class="flex items-center cursor-pointer">
        <span class="mr-2 text-sm">Show all activity</span>
        <div class="relative">
          <input type="checkbox" id="toggleView" class="sr-only peer">
          <div class="w-11 h-6 bg-muted rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary"></div>
        </div>
      </label>
    </div>
  </div>

 <div id="allActivities" class="space-y-5 relative">
    <div class="absolute left-4 top-4 w-px bg-border" style={`height: calc(100% - ${activityItems.length * 24}px);`}></div>
    {activityItems.map((item, index) => (
      <div class="flex items-start gap-4 relative">
        <div class="flex-shrink-0 w-8 h-8 rounded-full bg-muted flex items-center justify-center text-lg z-10">
          {item.icon}
        </div>
        {index !== activityItems.length - 1 && (
          <div class="absolute left-4 top-8 h-full w-px bg-border"></div>
        )}
        <div class="flex-grow border bg-muted/30 px-4 rounded-md">
          <p class="font-semibold">{item.title}</p>
          {item.details && <p class="text-sm text-muted-foreground mt-1">{item.details}</p>}
          
          {item.progress && (
            <div class="mt-2">
              <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
                <div class={`h-2.5 rounded-full ${getProgressBarColor(item.progress.percentage)}`} style={`width: ${item.progress.percentage}%`}></div>
              </div>
              <p class="text-xs text-muted-foreground mt-1">Progress: {item.progress.current}/{item.progress.total}</p>
            </div>
          )}

          {item.leagueProgress && (
            <div class="mt-2">
              <p class="text-sm">Current League: <span class="font-semibold">{item.leagueProgress.current}</span></p>
          <p class="text-xs text-muted-foreground">Total earned: {item.leagueProgress.totalEarned} XP</p>
            </div>
          )}

          {item.bookProgress && (
            <div class="mt-2">
              <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
                <div class={`h-2.5 rounded-full ${getProgressBarColor(item.bookProgress.percentage)}`} style={`width: ${item.bookProgress.percentage}%`}></div>
              </div>
              <p class="text-xs text-muted-foreground mt-1">Chapter {item.bookProgress.currentChapter}/{item.bookProgress.totalChapters} • Time spent: {item.timeSpent} minutes</p>
            </div>
          )}

          {item.projectPhase && (
            <div class="mt-2">
              <p class="text-sm">Phase: <span class="font-semibold">{item.projectPhase}</span></p>
              <p class="text-xs text-muted-foreground">Tasks: {item.tasksCompleted}/{item.totalTasks} completed</p>
            </div>
          )}

          {item.streakDays && (
            <div class="mt-2">
              <p class="text-sm">🔥 {item.streakDays} day streak</p>
              <p class="text-xs text-muted-foreground">Points earned: {item.pointsEarned}</p>
            </div>
          )}

          {item.topics && (
            <div class="mt-2 pb-2.5 border-b">
              <p class="text-sm m-0 font-semibold">Topics covered:</p>
              <div class="flex flex-wrap gap-1 mt-1.5">
                {item.topics.map(topic => (
                  <span class="text-xs bg-primary/10 text-primary px-2 py-0.5 rounded-full">{topic}</span>
                ))}
              </div>
            </div>
          )}

          <div class="flex justify-between items-center mt-1">
            <div class="flex flex-wrap gap-2">
              {item.tags.map((tag) => (
                <span class={`text-xs px-2 py-1 rounded-full ${getTagClasses(tag)}`}>{tag}</span>
              ))}
            </div>
            <p class="text-xs text-muted-foreground">{formatDate(item.date)}</p>
          </div>
        </div>
      </div>
    ))}
  </div>

  <div id="groupedActivities" class="space-y-5 relative hidden">
    <div class="absolute left-4 top-4 w-px bg-border" style={`height: calc(100% - ${groupedActivities.length * 30}px);`}></div>
    {groupedActivities.map((group, groupIndex) => (
      <div class="flex items-start gap-4 relative">
        <div class="flex-shrink-0 w-8 h-8 rounded-full bg-muted flex items-center justify-center text-lg z-10">
          {group[0].icon}
        </div>
        {groupIndex !== groupedActivities.length - 1 && (
          <div class="absolute left-4 top-8 h-full w-px bg-border"></div>
        )}
        <div class="flex-grow">
          <div class="border relative z-10 bg-muted px-4 py-3 rounded-md">
            <p class="font-semibold">{group[0].title}</p>
            {group[0].details && <p class="text-sm text-muted-foreground mt-1">{group[0].details}</p>}
            <div class="flex justify-between items-center mt-2">
              <div class="flex flex-wrap gap-2">
                {group[0].tags.map((tag) => (
                  <span class={`text-xs px-2 py-1 rounded-full ${getTagClasses(tag)}`}>{tag}</span>
                ))}
              </div>
              <p class="text-xs text-muted-foreground">{formatDate(group[0].date)}</p>
            </div>
          </div>
          {group.length > 1 && (
            <div class="mt-5 relative">
              <div class="absolute -top-3 left-4 right-4 h-4 bg-muted border rounded-md"></div>
              <div class="absolute -top-6 left-2 right-2 h-4 bg-muted border rounded-md"></div>
              <button class="w-full mt-6 text-sm text-primary hover:underline bg-background border rounded-md py-1 relative z-10">
                View {group.length - 1} more {group.length - 1 === 1 ? 'entry' : 'entries'}
              </button>
            </div>
          )}
        </div>
      </div>
    ))}
  </div>
</section>

<script>
  const toggleView = document.getElementById('toggleView') as HTMLInputElement;
  const allActivities = document.getElementById('allActivities') as HTMLElement;
  const groupedActivities = document.getElementById('groupedActivities') as HTMLElement;

  toggleView.addEventListener('change', function() {
    if (this.checked) {
      allActivities.classList.add('hidden');
      groupedActivities.classList.remove('hidden');
    } else {
      allActivities.classList.remove('hidden');
      groupedActivities.classList.add('hidden');
    }
  });
</script>
