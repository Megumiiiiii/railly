---
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  author: string;
  image?: string;
}

const { title, description, author, image = "/images/og.png" } = Astro.props;
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content={author} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:type" content="website" />
<meta property="og:site_name" content={author} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ViewTransitions />

<script is:inline>
  function updateTheme() {
    const theme =
      localStorage.getItem("theme") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light");

    document.documentElement.classList.toggle("dark", theme === "dark");
  }

  // Initial theme application
  document.addEventListener("astro:page-load", updateTheme, { once: true });

  // Apply theme after each navigation
  document.addEventListener("astro:after-swap", updateTheme);

  // Apply theme to new document before swap
  document.addEventListener("astro:before-swap", (ev) => {
    const theme = localStorage.getItem("theme");
    ev.newDocument.documentElement.classList.toggle("dark", theme === "dark");
  });

  // Update theme when system preference changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (event) => {
      localStorage.setItem("theme", event.matches ? "dark" : "light");
      updateTheme();
    });

  // Observe theme changes
  const observer = new MutationObserver(() => {
    const isDark = document.documentElement.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
    updateTheme();
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["class"],
  });
</script>
