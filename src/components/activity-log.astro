---
import type { LogitActivity } from "@/types";
import ActivityItem from "./activity-item.astro";
import GroupedActivityItem from "./grouped-activity-item.astro";
import { LOGIT_ACTIVITIES } from "@/data/activities";

function groupActivities(items: LogitActivity[]) {
  const grouped: { [key: string]: LogitActivity[] } = {};
  items.forEach((item) => {
    let key = item.type;
    if (item.type === "math-academy" && "subtype" in item) {
      key += `-${item.subtype}`;
    }
    if (!grouped[key]) {
      grouped[key] = [];
    }
    grouped[key].push(item);
  });
  return Object.values(grouped);
}

const groupedActivities = groupActivities(LOGIT_ACTIVITIES);
---

<section class="activity-log bg-background text-foreground rounded-lg relative">
  <div
    class="sticky-header top-blur !select-auto !pointer-events-auto !h-auto !w-auto"
  >
    <div class="flex justify-between items-center relative z-30">
      <h2 class="text-lg font-semibold">Activity Log</h2>
      <div class="flex items-center gap-4">
        <label class="flex items-center cursor-pointer">
          <span class="mr-2 text-sm">Show compact view</span>
          <div class="relative">
            <input type="checkbox" id="toggleView" class="sr-only peer" />
            <div
              class="w-11 h-6 bg-muted rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary"
            >
            </div>
          </div>
        </label>
      </div>
    </div>
  </div>

  <div id="allActivities" class="space-y-5 relative z-10 mt-16">
    <div
      class="absolute left-4 top-4 w-px bg-border"
      style={`height: calc(100% - ${LOGIT_ACTIVITIES.length * 24}px);`}
    >
    </div>
    {
      LOGIT_ACTIVITIES.map((item, index) => (
        <ActivityItem
          item={item}
          isLast={index === LOGIT_ACTIVITIES.length - 1}
        />
      ))
    }
  </div>

  <div id="groupedActivities" class="space-y-5 relative z-10 hidden mt-16">
    <div
      class="absolute left-4 top-4 w-px bg-border"
      style={`height: calc(100% - ${groupedActivities.length * 30}px);`}
    >
    </div>
    {
      groupedActivities.map((group, index) => (
        <GroupedActivityItem
          group={group}
          isLast={index === groupedActivities.length - 1}
        />
      ))
    }
  </div>
</section>

<script>
  function setupActivityLog() {
    const toggleView = document.getElementById(
      "toggleView",
    ) as HTMLInputElement;
    const allActivities = document.getElementById("allActivities");
    const groupedActivities = document.getElementById("groupedActivities");

    if (toggleView && allActivities && groupedActivities) {
      toggleView.addEventListener("change", function () {
        if (this.checked) {
          allActivities.classList.add("hidden");
          groupedActivities.classList.remove("hidden");
        } else {
          allActivities.classList.remove("hidden");
          groupedActivities.classList.add("hidden");
        }
      });
    }
  }

  // Run setup on initial load
  setupActivityLog();

  // Re-run setup on Astro page changes
  document.addEventListener("astro:page-load", setupActivityLog);
</script>

<style>
  .activity-log {
    position: relative;
  }

  .sticky-header {
    position: sticky;
    padding: 1rem 0;
    top: 0;
    z-index: 20;
    width: 100%;
    background: linear-gradient(
      to bottom,
      hsl(var(--background)) 60%,
      hsla(var(--background), 0.8) 80%,
      hsla(var(--background), 0) 100%
    );
    -webkit-mask-image: linear-gradient(
      to bottom,
      black 60%,
      rgba(255, 255, 255, 0.8) 80%,
      transparent 100%
    );
    mask-image: linear-gradient(
      to bottom,
      black 60%,
      rgba(0, 0, 0, 0.8) 80%,
      transparent 100%
    );
  }

  .sticky-header::after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    bottom: -20px;
    height: 20px;
    background: linear-gradient(
      to bottom,
      hsla(var(--background), 0.5) 0%,
      hsla(var(--background), 0) 100%
    );
    pointer-events: none;
    z-index: 15;
  }
</style>
