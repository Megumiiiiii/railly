---
// TOC.astro
import TocItem from "./TocItem.astro"
const { headings } = Astro.props;

interface TocItem {
  slug: string;
  text: string;
  level: number;
  children: TocItem[];
}

const buildTocTree = (items: TocItem[]): TocItem[] => {
  const tree: TocItem[] = [];
  const stack: TocItem[] = [];

  items.forEach(item => {
    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {
      stack.pop();
    }

    if (stack.length > 0) {
      stack[stack.length - 1].children.push(item);
    } else {
      tree.push(item);
    }

    stack.push(item);
  });

  return tree;
};

const tocItems: TocItem[] = headings.map((heading: { slug: string; text: string; depth: number }) => ({
  slug: heading.slug,
  text: heading.text,
  level: heading.depth,
  children: []
}));

const tocTree = buildTocTree(tocItems);
---

<nav class="toc border rounded-sm p-2">
  <h2 class="text-sm font-semibold mb-3 text-foreground">Table of Contents</h2>
  <ul class="space-y-2">
    {tocTree.map((item, index) => (
      <TocItem item={item} index={index} />
    ))}
  </ul>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButtons = document.querySelectorAll('.js-toc-toggle');
    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const index = button.getAttribute('data-index');
        const submenu = document.querySelector(`.js-toc-submenu[data-index="${index}"]`);
        const svg = button.querySelector('svg');
        const link = button.nextElementSibling;
        
        if (submenu) {
          submenu.classList.toggle('hidden');
          svg?.classList.toggle('rotate-180');
          link?.classList.toggle('underline');
        }
      });
    });
  });
</script>
